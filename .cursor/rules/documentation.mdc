---
description: Documentation standards and rules for contract and API documentation
globs: ["*.sol", "*.md", "docs/**/*"]
alwaysApply: true
---

# Documentation Standards

## Documentation Style
- Use Canadian spelling and usage
- Keep documentation professional but approachable
- Write documentation so it is useful for the purpose of external developers who want to understand our tools. Documentation only of interest to Berachain internal developers should be excluded.
- Follow @CONTRIBUTING.md style guide

### Source of Truth
- Interface files (*.I.sol) are the definitive source for:
  - Struct definitions
  - Function signatures
  - Events
- Implementation files are authoritative for NatSpec documentation
- Interface definitions take precedence in any conflicts


### ABI Updates
- To update published ABI files, check out the git@github.com:berachain/doc-abis repository, and the git@github.com:berachain/contracts-internal repository. In the contracts repo, check out the devel branch. Then, in the doc-abis directory invoke `npm run abis:sync`.
- This is a separate process from updating the autodocs.

### Git Source Links
- All Git Source links in documentation MUST point to the public contracts repository at github.com:berachain/contracts/
- When generating documentation from contracts-internal, replace the repository path in Git Source links
- Example: Replace `https://github.com/berachain/contracts-internal/blob/[commit]/src/...` with `https://github.com/berachain/contracts/blob/main/src/...`

### Autodoc generation
The user can request to "refresh the autodocs". This means the following sequence.
- Check out a copy of git@github.com:berachain/contracts-internal and switch to the devel branch
- Use `forge doc` to generate contract documentation markdown.
- Extract the documentation from the markdown and replace the body of the corresponding file in this repository, applying the following rules as you copy the markdown. Repeat this process for every file generated by `forge doc`.
  - Exclude `supportsInterface` functions (ERC-165) from documentation.
  - Omit documentation for:
    - Private constants, variables, and functions
    - Internal constants, variables, and functions 
    - Functions intended for subclasses
  - Omit all Inherits lines

- Every file in the documentation autodocs should have a preamble like this at the top. In the preamble, the key to look up within config.contracts depends on the contract itself. Ask if you aren't sure which to use. You can update the ABI link in @constants.json if you find a new ABI in doc-abis repository. For the Git Source link, link to the contract under the github.com:berachain/contracts/ repository, presuming that the path you find in contracts-internal will eventually be merged into the contracts repository. 

```
> <small><a target="_blank" :href="config.mainnet.dapps.berascan.url + 'address/' + config.contracts.pol.berachef['mainnet-address']">{{config.contracts.pol.berachef['mainnet-address']}}</a><span v-if="config.contracts.pol.berachef.abi">&nbsp;|&nbsp;<a target="_blank" :href="config.contracts.pol.berachef.abi">ABI JSON</a></span></small>

[Git Source](https://github.com/berachain/contracts/blob/main/src/pol/rewards/BeraChef.sol)
```

- Contract documentation pages should then be reorganized into the following order:
   - Constants
   - Structures used in state variables 
   - Public state variables
   - Public view functions
   - Public state-changing functions
   - Events
- The only exception for members to omit is for internal members in RewardVault.
- Use alphabetical sorting order the names of functions, state variables, constants, and events.
- Provide cross-links from state-changing functions to the events they can trigger. Use 'events-' prefix for event HTML anchors

### Validation Requirements
- Struct definitions and function calls must exactly match solidity code:
  - Names
  - Types
  - Order
- Include type information in struct descriptions

### File Management
- Seek permission before creating new files
- Keep READMEs current
- Respect pnpm workspace in guides/exp
- Use loose version numbers for minor upgrades
- Ensure any new files are inserted into the relevant sidebar file.
